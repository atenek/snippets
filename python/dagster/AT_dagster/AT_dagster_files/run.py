from dagster import materialize, resource
from logic import defs
from logic.assets import readfile0, readfile1, readfile2
from dagster._core.storage.fs_io_manager import fs_io_manager
import time
# execute_in_process()	–í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª–Ω—è–µ—Ç –≤—Å—ë –∑–∞–Ω–æ–≤–æ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π Python
# Definitions.materialize()	–£—á–∏—Ç—ã–≤–∞–µ—Ç, —á—Ç–æ —É–∂–µ –±—ã–ª–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–æ (—á–µ—Ä–µ–∑ IO Manager)

if __name__ == "__main__":

    if True:
        assets = [readfile0, readfile1, readfile2]

        print("\nüîÅ –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫: Dagster –≤—ã–ø–æ–ª–Ω–∏—Ç –≤—Å–µ assets, –Ω–∞—á–∏–Ω–∞—è —Å readfile0\n")
        result = materialize(
            assets,
            #selection=["readfile0", "readfile1", "readfile2"],
            resources={
                "my_io_manager": fs_io_manager.configured({
                "base_dir": "/home/alex/Prj/2_dev/lbft/AT_dugster/AT_dagster_files/io"})})
        assert result.success

        value = result.output_for_node("readfile2")
        print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç readfile2:\n", value)
        value = result.output_for_node("readfile1")
        print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç readfile1:\n", value)
        value = result.output_for_node("readfile0")
        print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç readfile0:\n", value)

        print("\n---\n")
        time.sleep(2)

        print("\nüîÅ –í—Ç–æ—Ä–æ–π –∑–∞–ø—É—Å–∫: Dagster –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ –≤—Å—ë —É–∂–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–æ\n")
        result2 = materialize(
            assets,
            #selection=["readfile0", "readfile1", "readfile2"],
            resources={
                "my_io_manager": fs_io_manager.configured({
                    "base_dir": "/home/alex/Prj/2_dev/lbft/AT_dugster/AT_dagster_files/io"})})
        assert result2.success

        value = result2.output_for_node("readfile2")
        print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç readfile2:\n", value)
        value = result2.output_for_node("readfile1")
        print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç readfile1:\n", value)
        value = result2.output_for_node("readfile0")
        print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç readfile0:\n", value)

    else:
        job_def = defs.get_job_def("read_root")
        result = job_def.execute_in_process()
        assert result.success
        value = result.output_for_node("readfile2")
        print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç readfile2:\n", value)
        value = result.output_for_node("readfile1")
        print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç readfile1:\n", value)
        value = result.output_for_node("readfile0")
        print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç readfile0:\n", value)

        time.sleep(2)

        result = job_def.execute_in_process()
        assert result.success
        value = result.output_for_node("readfile2")
        print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç readfile2:\n", value)
        value = result.output_for_node("readfile1")
        print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç readfile1:\n", value)
        value = result.output_for_node("readfile0")
        print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç readfile0:\n", value)

assets = [Reader_0, Reader_1, Reader_2]
dag_instance = DagsterInstance.get()
print("\nüîÅ –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫: Dagster –≤—ã–ø–æ–ª–Ω–∏—Ç –≤—Å–µ assets, –Ω–∞—á–∏–Ω–∞—è —Å Reader_2 -> Reader_1 -> Reader_0\n")
result = materialize(assets, instance=dag_instance, resources={"my_io_manager": iom})
assert result.success
for i in ["2", "1", "0"]:
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç Reader_{i}:\n", result.output_for_node(f"Reader_{i}"))
print("\n---\n")
time.sleep(5)
print("\nüîÅ –í—Ç–æ—Ä–æ–π –∑–∞–ø—É—Å–∫: Dagster –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ –≤—Å—ë —É–∂–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–æ\n")
# result2 = materialize(assets,  instance=dag_instance, resources={"my_io_manager": iom})
result2 = materialize(assets, instance=dag_instance, resources={"my_io_manager": iom})
assert result2.success
for i in ["2", "1", "0"]:
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç Reader_{i}:\n", result2.output_for_node(f"Reader_{i}"))

#defs = Definitions( assets = [Reader_0, Reader_1, Reader_2],
#                    jobs = [read_root],
#                    resources = {"my_io_manager": iom} )

defs = Definitions(
    assets=[Reader_0, Reader_1, Reader_2],
    resources={"io_manager": mem_io_manager.configured({"base_io_manager": MyCustomIOManager(Path("./io0").resolve())})}
)